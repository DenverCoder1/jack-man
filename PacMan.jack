class PacMan {
  field int x, y, size;
  /** ( 1="up" | 2="down" | 3="left" | 4="right" ) */
  field int dir;
  field Walls walls;
  field Pellets pellets;
  field int speed;
  field boolean isCaptured;

  constructor PacMan new(Pellets p, Walls w) {
    let speed = 3;
    let x = 165; // start x
    let y = 155; // start y
    let size = 12;
    let dir = 1; // start by going up
    let isCaptured = false;

    let walls = w;
    let pellets = p;

    return this;
  }

  // left edge
  method int getX() {
    return x;
  }

  // top edge
  method int getY() {
    return y;
  }

  // right edge
  method int endX() {
    return x + size - 1;
  }

  // bottom edge
  method int endY() {
    return y + size - 1;
  }

  method boolean getIsCaptured() {
    return isCaptured;
  }

  method void init() {
    do draw();
    return;
  }

  method void next() {
    var boolean didMove;
    let didMove = advance();
    if (didMove) {
      do draw();
      do capturePellets();
    }
    return;
  }

  method boolean advance() {
    var int nextX, nextY;
    let nextX = getNextX();
    let nextY = getNextY();
    if (willCollideWithWalls(nextX, nextY)) {
      return false;
    }
    if ((x = nextX) & (y = nextY)) {
      return false;
    }
    let x = nextX;
    let y = nextY;
    return true;
  }

  method void capturePellets() {
    do pellets.setCollected(x, y, endX(), endY(), true);
    return;
  }

  method void draw() {
    //erase pacman
    do Screen.setColor(false);
    /** ( 1="up" | 2="down" | 3="left" | 4="right" ) */
    if (dir = 4) {
      do Screen.drawRectangle(x - speed, y, endX() - speed, endY());
    }
    if (dir = 3) {
      do Screen.drawRectangle(x + speed, y, endX() + speed, endY());
    }
    if (dir = 2) {
      do Screen.drawRectangle(x, y - speed, endX(), endY() - speed);
    }
    if (dir = 1) {
      do Screen.drawRectangle(x, y + speed, endX(), endY() + speed);
    }
    // new pacman
    do Screen.setColor(true);
    // draw pacman circle
    do Screen.drawCircle(x + 6, y + 6, 5);
    return;
  }

  method boolean willCollideWithWalls(int nextX, int nextY) {
    var int nextEndX, nextEndY;
    let nextEndX = nextX + size - 1;
    let nextEndY = nextY + size - 1;
    return walls.checkOverlapping(nextX, nextY, nextEndX, nextEndY);
  }

  method int getNextX() {
    var int nextX;
    let nextX = x;
    if (dir = 4) {
      let nextX = x + speed;
    }
    if (dir = 3) {
      let nextX = x - speed;
    }
    return nextX;
  }

  method int getNextY() {
    var int nextY;
    let nextY = y;
    if (dir = 2) {
      let nextY = y + speed;
    }
    if (dir = 1) {
      let nextY = y - speed;
    }
    if (nextY > 220) {
      let nextY = 12;
      do Screen.setColor(false);
      do Screen.drawRectangle(x, y, endX(), endY());
    }
    if (nextY < 10) {
      let nextY = 220;
      do Screen.setColor(false);
      do Screen.drawRectangle(x, y, endX(), endY());
    }
    return nextY;
  }

  method void handleKey(int key) {
    if (key = 131) {
      do setDir(1); // up
    }
    if (key = 133) {
      do setDir(2); // down
    }
    if (key = 130) {
      do setDir(3); // left
    }
    if (key = 132) {
      do setDir(4); // right
    }
    return;
  }

  method void setDir(int newDir) {
    let dir = newDir;
    return;
  }

  method void capture() {
    let isCaptured = true;
    return;
  }

  method boolean checkOverlapping(int x1, int y1, int x2, int y2) {
    return (
      (x1 < (endX()+1)) & (x2 > (x-1))
    ) & (
      (y1 < (endY()+1)) & (y2 > (y-1))
    );
  }

  method void dispose() {
    	do Memory.deAlloc(this);
    return;
  }
}