class PacMan {
  field int x, y, size;
  /** ( 1="up" | 2="down" | 3="left" | 4="right" ) */
  field int dir;
  field Walls walls;
  field Dots dots;
  field int speed;
  field boolean isCaptured;
  field int frame;

  constructor PacMan new(Dots d, Walls w) {
    /* Pacman Config */
    let speed = 3;
    let x = 165; // Start x
    let y = 155; // Start y
    let size = 12;
    let dir = 1; // Start direction up
    let isCaptured = false;
    let frame = -1;

    let walls = w;
    let dots = d;

    return this;
  }

  /* Getters */
  method int getX() {
    return x;
  }

  method int getY() {
    return y;
  }

  method int endX() {
    return x + size - 1;
  }

  method int endY() {
    return y + size - 1;
  }

  method boolean getIsCaptured() {
    return isCaptured;
  }

  method void init() {
    do draw();
    return;
  }

  method void next() {
    var boolean didMove;
    let didMove = advance();
    if (didMove) {
      do draw();
      do captureDots();
    }
    return;
  }

  method boolean advance() {
    var int nextX, nextY;
    let nextX = getNextX();
    let nextY = getNextY();
    if (willCollideWithWalls(nextX, nextY)) {
      return false;
    }
    if ((x = nextX) & (y = nextY)) {
      return false;
    }
    let x = nextX;
    let y = nextY;
    return true;
  }

  method void captureDots() {
    do dots.setCaptured(x, y, endX(), endY());
    return;
  }

  method void drawPacman(int frame, int dir) {
    var double memAddress;
    var int i;
    var int xOffset;
    var int yOffset;
    // shift left 17 times
    let memAddress = 16384 + xOffset + yOffset;
    if (frame = -1) {
        do Memory.poke(memAddress+32, 16770);
        do Memory.poke(memAddress+64, 8196);
        do Memory.poke(memAddress+96, 4104);
        do Memory.poke(memAddress+128, 2064);
        do Memory.poke(memAddress+160, 1056);
        do Memory.poke(memAddress+192, 576);
        do Memory.poke(memAddress+224, 16770);
        do Memory.poke(memAddress+256, 16770);
        do Memory.poke(memAddress+288, 576);
        do Memory.poke(memAddress+320, 1056);
        do Memory.poke(memAddress+352, 2064);
        do Memory.poke(memAddress+384, 4104);
        do Memory.poke(memAddress+416, 8196);
        do Memory.poke(memAddress+448, 16770);
    }
    /* closed mouth */
    if (frame = 0) {
      do Memory.poke(memAddress+0, 992);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 8188);
      do Memory.poke(memAddress+96, 16382);
      do Memory.poke(memAddress+128, 16382);
      do Memory.poke(memAddress+160, 32767);
      do Memory.poke(memAddress+192, 32767);
      do Memory.poke(memAddress+224, 32767);
      do Memory.poke(memAddress+256, 32767);
      do Memory.poke(memAddress+288, 32767);
      do Memory.poke(memAddress+320, 16382);
      do Memory.poke(memAddress+352, 16382);
      do Memory.poke(memAddress+384, 8188);
      do Memory.poke(memAddress+416, 4088);
      do Memory.poke(memAddress+448, 0);
      do Memory.poke(memAddress+480, 0);
    }
    /* open mouth */
    if (frame = 1) {
      /* up */
      if (dir = 1) {
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 7196);
        do Memory.poke(memAddress+96, 15934);
        do Memory.poke(memAddress+128, 15934);
        do Memory.poke(memAddress+160, 32319);
        do Memory.poke(memAddress+192, 32639);
        do Memory.poke(memAddress+224, 32639);
        do Memory.poke(memAddress+256, 32767);
        do Memory.poke(memAddress+288, 32767);
        do Memory.poke(memAddress+320, 16382);
        do Memory.poke(memAddress+352, 16382);
        do Memory.poke(memAddress+384, 8188);
        do Memory.poke(memAddress+416, 4088);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
      }
      /* down */
      if (dir = 2) {
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 4088);
        do Memory.poke(memAddress+96, 8188);
        do Memory.poke(memAddress+128, 16382);
        do Memory.poke(memAddress+160, 16382);
        do Memory.poke(memAddress+192, 32767);
        do Memory.poke(memAddress+224, 32767);
        do Memory.poke(memAddress+256, 32639);
        do Memory.poke(memAddress+288, 32639);
        do Memory.poke(memAddress+320, 32319);
        do Memory.poke(memAddress+352, 15934);
        do Memory.poke(memAddress+384, 15934);
        do Memory.poke(memAddress+416, 7196);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
      }
      /* left */
      if (dir = 3) {
        do Memory.poke(memAddress+0, 992);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 8188);
        do Memory.poke(memAddress+96, 16382);
        do Memory.poke(memAddress+128, 16382);
        do Memory.poke(memAddress+160, 32760);
        do Memory.poke(memAddress+192, 32704);
        do Memory.poke(memAddress+224, 32512);
        do Memory.poke(memAddress+256, 32704);
        do Memory.poke(memAddress+288, 32760);
        do Memory.poke(memAddress+320, 16382);
        do Memory.poke(memAddress+352, 16382);
        do Memory.poke(memAddress+384, 8188);
        do Memory.poke(memAddress+416, 4088);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
      }
      /* right */
      if (dir = 4) {
        do Memory.poke(memAddress+0, 1984);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 16376);
        do Memory.poke(memAddress+96, 32764);
        do Memory.poke(memAddress+128, 32764);
        do Memory.poke(memAddress+160, 8190);
        do Memory.poke(memAddress+192, 1022);
        do Memory.poke(memAddress+224, 254);
        do Memory.poke(memAddress+256, 1022);
        do Memory.poke(memAddress+288, 8190);
        do Memory.poke(memAddress+320, 32764);
        do Memory.poke(memAddress+352, 32764);
        do Memory.poke(memAddress+384, 16376);
        do Memory.poke(memAddress+416, 8176);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
      }
    }
    /* open mouth 2 */
    if (frame = 2) {
      /** up */
      if (dir = 1) {
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 24579);
        do Memory.poke(memAddress+192, 28679);
        do Memory.poke(memAddress+224, 30735);
        do Memory.poke(memAddress+256, 31775);
        do Memory.poke(memAddress+288, 32319);
        do Memory.poke(memAddress+320, 16254);
        do Memory.poke(memAddress+352, 16382);
        do Memory.poke(memAddress+384, 8188);
        do Memory.poke(memAddress+416, 4088);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
      }
      /** down */
      if (dir = 2) {
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 4088);
        do Memory.poke(memAddress+96, 8188);
        do Memory.poke(memAddress+128, 16382);
        do Memory.poke(memAddress+160, 16254);
        do Memory.poke(memAddress+192, 32319);
        do Memory.poke(memAddress+224, 31775);
        do Memory.poke(memAddress+256, 30735);
        do Memory.poke(memAddress+288, 28679);
        do Memory.poke(memAddress+320, 24579);
        do Memory.poke(memAddress+352, 0);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
      }
      /** left */
      if (dir = 3) {
        do Memory.poke(memAddress+0, 992);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 8128);
        do Memory.poke(memAddress+96, 16256);
        do Memory.poke(memAddress+128, 16128);
        do Memory.poke(memAddress+160, 32256);
        do Memory.poke(memAddress+192, 31744);
        do Memory.poke(memAddress+224, 30720);
        do Memory.poke(memAddress+256, 31744);
        do Memory.poke(memAddress+288, 32256);
        do Memory.poke(memAddress+320, 16128);
        do Memory.poke(memAddress+352, 16256);
        do Memory.poke(memAddress+384, 8128);
        do Memory.poke(memAddress+416, 4064);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
      }
      /** right */
      if (dir = 4) {
        do Memory.poke(memAddress+0, 1984);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 1016);
        do Memory.poke(memAddress+96, 508);
        do Memory.poke(memAddress+128, 252);
        do Memory.poke(memAddress+160, 126);
        do Memory.poke(memAddress+192, 62);
        do Memory.poke(memAddress+224, 30);
        do Memory.poke(memAddress+256, 62);
        do Memory.poke(memAddress+288, 126);
        do Memory.poke(memAddress+320, 252);
        do Memory.poke(memAddress+352, 508);
        do Memory.poke(memAddress+384, 1016);
        do Memory.poke(memAddress+416, 2032);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
      }
    }
    return;
  }

  method void draw() {
    //erase pacman
    do Screen.setColor(false);
    /** ( 1="up" | 2="down" | 3="left" | 4="right" ) */
    if (dir = 4) {
      do Screen.drawRectangle(x - speed, y, endX() - speed, endY());
    }
    if (dir = 3) {
      do Screen.drawRectangle(x + speed, y, endX() + speed, endY());
    }
    if (dir = 2) {
      do Screen.drawRectangle(x, y - speed, endX(), endY() - speed);
    }
    if (dir = 1) {
      do Screen.drawRectangle(x, y + speed, endX(), endY() + speed);
    }
    // new pacman
    do Screen.setColor(true);
    do Screen.drawRectangle(x, y, endX(), endY());
    // do drawPacman(frame, dir);
    return;
  }

  method boolean willCollideWithWalls(int nextX, int nextY) {
    var int nextEndX, nextEndY;
    let nextEndX = nextX + size - 1;
    let nextEndY = nextY + size - 1;
    return walls.isOverlap(nextX, nextY, nextEndX, nextEndY);
  }

  method int getNextX() {
    var int nextX;
    let nextX = x;
    if (dir = 4) {
      let nextX = x + speed;
    }
    if (dir = 3) {
      let nextX = x - speed;
    }
    return nextX;
  }

  method int getNextY() {
    var int nextY;
    let nextY = y;
    if (dir = 2) {
      let nextY = y + speed;
    }
    if (dir = 1) {
      let nextY = y - speed;
    }
    if (nextY > 220) {
      let nextY = 12;
      do Screen.setColor(false);
      do Screen.drawRectangle(x, y, endX(), endY());
    }
    if (nextY < 12) {
      let nextY = 220;
      do Screen.setColor(false);
      do Screen.drawRectangle(x, y, endX(), endY());
    }
    return nextY;
  }

  method void reset() {
    let x = 248;
    let y = 120;
    let dir = 4;
    return;
  }

  method void handleKey(int key) {
    if (key = 130) {
      do setDir(3); // left
    }
    if (key = 131) {
      do setDir(1); // up
    }
    if (key = 132) {
      do setDir(4); // right
    }
    if (key = 133) {
      do setDir(2); // down
    }
    return;
  }

  method void setDir(int newDir) {
    let dir = newDir; // assume valid direction
    return;
  }

  method void capture() {
    let isCaptured = true;
    return;
  }

  method boolean isOverlap(int x1, int y1, int x2, int y2) {
    return (
      (x1 < (endX()+1)) & (x2 > (x-1))
    ) & (
      (y1 < (endY()+1)) & (y2 > (y-1))
    );
  }

  method void dispose() {
    	do Memory.deAlloc(this);
    return;
  }
}